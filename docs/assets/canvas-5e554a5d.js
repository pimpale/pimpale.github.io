var h=Object.defineProperty;var u=(n,e,s)=>e in n?h(n,e,{enumerable:!0,configurable:!0,writable:!0,value:s}):n[e]=s;var t=(n,e,s)=>(u(n,typeof e!="symbol"?e+"":e,s),s);class c{constructor(e){t(this,"canvas");t(this,"mousePos",null);t(this,"mouseDownListeners",[]);t(this,"mouseMoveListeners",[]);t(this,"mouseUpListeners",[]);t(this,"addMouseDownListener",e=>this.mouseDownListeners.push(e));t(this,"removeMouseDownListener",e=>this.mouseDownListeners=this.mouseDownListeners.filter(s=>s!==e));t(this,"addMouseMoveListener",e=>this.mouseMoveListeners.push(e));t(this,"removeMouseMoveListener",e=>this.mouseMoveListeners=this.mouseMoveListeners.filter(s=>s!==e));t(this,"addMouseUpListener",e=>this.mouseUpListeners.push(e));t(this,"reupMouseUpListener",e=>this.mouseUpListeners=this.mouseUpListeners.filter(s=>s!==e));t(this,"handleMouseDown",e=>{const s=this.getMousePos(this.canvas,e);this.mousePos={current:s,previous:s};for(const o of this.mouseDownListeners)o(s)});t(this,"handleMouseUp",e=>{this.mousePos=null;const s=this.getMousePos(this.canvas,e);for(const o of this.mouseUpListeners)o(s)});t(this,"handleMouseMove",e=>{if(!this.mousePos)return;const s=this.getMousePos(this.canvas,e);this.mousePos={current:s,previous:this.mousePos.current};for(const o of this.mouseMoveListeners)o(s)});t(this,"discardTouchEvent",e=>e.preventDefault());t(this,"cleanup",()=>{this.canvas.removeEventListener("pointerdown",this.handleMouseDown),this.canvas.removeEventListener("pointermove",this.handleMouseMove),window.removeEventListener("pointerup",this.handleMouseUp),this.canvas.removeEventListener("touchstart",this.discardTouchEvent),this.canvas.removeEventListener("touchmove",this.discardTouchEvent),this.canvas.removeEventListener("touchend",this.discardTouchEvent),this.canvas.removeEventListener("touchcancel",this.discardTouchEvent)});this.canvas=e,this.canvas.addEventListener("pointerdown",this.handleMouseDown),this.canvas.addEventListener("pointermove",this.handleMouseMove),window.addEventListener("pointerup",this.handleMouseUp),this.canvas.addEventListener("touchstart",this.discardTouchEvent),this.canvas.addEventListener("touchmove",this.discardTouchEvent),this.canvas.addEventListener("touchend",this.discardTouchEvent),this.canvas.addEventListener("touchcancel",this.discardTouchEvent)}getMousePos(e,s){const o=e.getBoundingClientRect(),i=e.width/o.width,r=e.height/o.height;return{x:(s.clientX-o.left)*i,y:(s.clientY-o.top)*r}}}export{c as C};
